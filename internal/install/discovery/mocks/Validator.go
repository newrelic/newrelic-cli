// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "github.com/newrelic/newrelic-cli/internal/install/types"
)

// Validator is an autogenerated mock type for the Validator type
type Validator struct {
	mock.Mock
}

type Validator_Expecter struct {
	mock *mock.Mock
}

func (_m *Validator) EXPECT() *Validator_Expecter {
	return &Validator_Expecter{mock: &_m.Mock}
}

// Validate provides a mock function with given fields: _a0
func (_m *Validator) Validate(_a0 *types.DiscoveryManifest) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.DiscoveryManifest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Validator_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type Validator_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - _a0 *types.DiscoveryManifest
func (_e *Validator_Expecter) Validate(_a0 interface{}) *Validator_Validate_Call {
	return &Validator_Validate_Call{Call: _e.mock.On("Validate", _a0)}
}

func (_c *Validator_Validate_Call) Run(run func(_a0 *types.DiscoveryManifest)) *Validator_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.DiscoveryManifest))
	})
	return _c
}

func (_c *Validator_Validate_Call) Return(_a0 error) *Validator_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewValidator interface {
	mock.TestingT
	Cleanup(func())
}

// NewValidator creates a new instance of Validator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewValidator(t mockConstructorTestingTNewValidator) *Validator {
	mock := &Validator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
