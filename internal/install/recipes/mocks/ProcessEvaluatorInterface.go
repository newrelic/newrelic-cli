// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	execution "github.com/newrelic/newrelic-cli/internal/install/execution"
	mock "github.com/stretchr/testify/mock"

	types "github.com/newrelic/newrelic-cli/internal/install/types"
)

// ProcessEvaluatorInterface is an autogenerated mock type for the ProcessEvaluatorInterface type
type ProcessEvaluatorInterface struct {
	mock.Mock
}

type ProcessEvaluatorInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ProcessEvaluatorInterface) EXPECT() *ProcessEvaluatorInterface_Expecter {
	return &ProcessEvaluatorInterface_Expecter{mock: &_m.Mock}
}

// DetectionStatus provides a mock function with given fields: ctx, r
func (_m *ProcessEvaluatorInterface) DetectionStatus(ctx context.Context, r *types.OpenInstallationRecipe) execution.RecipeStatusType {
	ret := _m.Called(ctx, r)

	var r0 execution.RecipeStatusType
	if rf, ok := ret.Get(0).(func(context.Context, *types.OpenInstallationRecipe) execution.RecipeStatusType); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Get(0).(execution.RecipeStatusType)
	}

	return r0
}

// ProcessEvaluatorInterface_DetectionStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetectionStatus'
type ProcessEvaluatorInterface_DetectionStatus_Call struct {
	*mock.Call
}

// DetectionStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - r *types.OpenInstallationRecipe
func (_e *ProcessEvaluatorInterface_Expecter) DetectionStatus(ctx interface{}, r interface{}) *ProcessEvaluatorInterface_DetectionStatus_Call {
	return &ProcessEvaluatorInterface_DetectionStatus_Call{Call: _e.mock.On("DetectionStatus", ctx, r)}
}

func (_c *ProcessEvaluatorInterface_DetectionStatus_Call) Run(run func(ctx context.Context, r *types.OpenInstallationRecipe)) *ProcessEvaluatorInterface_DetectionStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.OpenInstallationRecipe))
	})
	return _c
}

func (_c *ProcessEvaluatorInterface_DetectionStatus_Call) Return(_a0 execution.RecipeStatusType) *ProcessEvaluatorInterface_DetectionStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetOrLoadProcesses provides a mock function with given fields: ctx
func (_m *ProcessEvaluatorInterface) GetOrLoadProcesses(ctx context.Context) []types.GenericProcess {
	ret := _m.Called(ctx)

	var r0 []types.GenericProcess
	if rf, ok := ret.Get(0).(func(context.Context) []types.GenericProcess); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.GenericProcess)
		}
	}

	return r0
}

// ProcessEvaluatorInterface_GetOrLoadProcesses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrLoadProcesses'
type ProcessEvaluatorInterface_GetOrLoadProcesses_Call struct {
	*mock.Call
}

// GetOrLoadProcesses is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ProcessEvaluatorInterface_Expecter) GetOrLoadProcesses(ctx interface{}) *ProcessEvaluatorInterface_GetOrLoadProcesses_Call {
	return &ProcessEvaluatorInterface_GetOrLoadProcesses_Call{Call: _e.mock.On("GetOrLoadProcesses", ctx)}
}

func (_c *ProcessEvaluatorInterface_GetOrLoadProcesses_Call) Run(run func(ctx context.Context)) *ProcessEvaluatorInterface_GetOrLoadProcesses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ProcessEvaluatorInterface_GetOrLoadProcesses_Call) Return(_a0 []types.GenericProcess) *ProcessEvaluatorInterface_GetOrLoadProcesses_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewProcessEvaluatorInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewProcessEvaluatorInterface creates a new instance of ProcessEvaluatorInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProcessEvaluatorInterface(t mockConstructorTestingTNewProcessEvaluatorInterface) *ProcessEvaluatorInterface {
	mock := &ProcessEvaluatorInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
