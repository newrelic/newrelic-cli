// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/newrelic/newrelic-cli/internal/install/types"
)

// RecipeFetcher is an autogenerated mock type for the RecipeFetcher type
type RecipeFetcher struct {
	mock.Mock
}

type RecipeFetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *RecipeFetcher) EXPECT() *RecipeFetcher_Expecter {
	return &RecipeFetcher_Expecter{mock: &_m.Mock}
}

// FetchLibraryVersion provides a mock function with given fields: _a0
func (_m *RecipeFetcher) FetchLibraryVersion(_a0 context.Context) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RecipeFetcher_FetchLibraryVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchLibraryVersion'
type RecipeFetcher_FetchLibraryVersion_Call struct {
	*mock.Call
}

// FetchLibraryVersion is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *RecipeFetcher_Expecter) FetchLibraryVersion(_a0 interface{}) *RecipeFetcher_FetchLibraryVersion_Call {
	return &RecipeFetcher_FetchLibraryVersion_Call{Call: _e.mock.On("FetchLibraryVersion", _a0)}
}

func (_c *RecipeFetcher_FetchLibraryVersion_Call) Run(run func(_a0 context.Context)) *RecipeFetcher_FetchLibraryVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RecipeFetcher_FetchLibraryVersion_Call) Return(_a0 string) *RecipeFetcher_FetchLibraryVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

// FetchRecipes provides a mock function with given fields: _a0
func (_m *RecipeFetcher) FetchRecipes(_a0 context.Context) ([]*types.OpenInstallationRecipe, error) {
	ret := _m.Called(_a0)

	var r0 []*types.OpenInstallationRecipe
	if rf, ok := ret.Get(0).(func(context.Context) []*types.OpenInstallationRecipe); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.OpenInstallationRecipe)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecipeFetcher_FetchRecipes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchRecipes'
type RecipeFetcher_FetchRecipes_Call struct {
	*mock.Call
}

// FetchRecipes is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *RecipeFetcher_Expecter) FetchRecipes(_a0 interface{}) *RecipeFetcher_FetchRecipes_Call {
	return &RecipeFetcher_FetchRecipes_Call{Call: _e.mock.On("FetchRecipes", _a0)}
}

func (_c *RecipeFetcher_FetchRecipes_Call) Run(run func(_a0 context.Context)) *RecipeFetcher_FetchRecipes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RecipeFetcher_FetchRecipes_Call) Return(_a0 []*types.OpenInstallationRecipe, _a1 error) *RecipeFetcher_FetchRecipes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewRecipeFetcher interface {
	mock.TestingT
	Cleanup(func())
}

// NewRecipeFetcher creates a new instance of RecipeFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRecipeFetcher(t mockConstructorTestingTNewRecipeFetcher) *RecipeFetcher {
	mock := &RecipeFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
