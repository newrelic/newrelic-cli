// Code generated by mockery v2.14.1. DO NOT EDIT.

package discovery

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	discovery "github.com/newrelic/newrelic-cli/internal/install/discovery"

	types "github.com/newrelic/newrelic-cli/internal/install/types"
)

// ManifestDiscoverer is an autogenerated mock type for the ManifestDiscoverer type
type ManifestDiscoverer struct {
	mock.Mock
}

type ManifestDiscoverer_Expecter struct {
	mock *mock.Mock
}

func (_m *ManifestDiscoverer) EXPECT() *ManifestDiscoverer_Expecter {
	return &ManifestDiscoverer_Expecter{mock: &_m.Mock}
}

// DiscoverManifest provides a mock function with given fields: _a0, _a1
func (_m *ManifestDiscoverer) DiscoverManifest(_a0 context.Context, _a1 discovery.Discoverer) (*types.DiscoveryManifest, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.DiscoveryManifest
	if rf, ok := ret.Get(0).(func(context.Context, discovery.Discoverer) *types.DiscoveryManifest); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.DiscoveryManifest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, discovery.Discoverer) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ManifestDiscoverer_DiscoverManifest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DiscoverManifest'
type ManifestDiscoverer_DiscoverManifest_Call struct {
	*mock.Call
}

// DiscoverManifest is a helper method to define mock.On call
//   - _a0 context.MockContext
//   - _a1 discovery.Discoverer
func (_e *ManifestDiscoverer_Expecter) DiscoverManifest(_a0 interface{}, _a1 interface{}) *ManifestDiscoverer_DiscoverManifest_Call {
	return &ManifestDiscoverer_DiscoverManifest_Call{Call: _e.mock.On("DiscoverManifest", _a0, _a1)}
}

func (_c *ManifestDiscoverer_DiscoverManifest_Call) Run(run func(_a0 context.Context, _a1 discovery.Discoverer)) *ManifestDiscoverer_DiscoverManifest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(discovery.Discoverer))
	})
	return _c
}

func (_c *ManifestDiscoverer_DiscoverManifest_Call) Return(_a0 *types.DiscoveryManifest, _a1 error) *ManifestDiscoverer_DiscoverManifest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ValidateManifest provides a mock function with given fields: manifest
func (_m *ManifestDiscoverer) ValidateManifest(manifest *types.DiscoveryManifest, validator discovery.Validator) error {
	ret := _m.Called(manifest)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.DiscoveryManifest) error); ok {
		r0 = rf(manifest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ManifestDiscoverer_ValidateManifest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateManifest'
type ManifestDiscoverer_ValidateManifest_Call struct {
	*mock.Call
}

// ValidateManifest is a helper method to define mock.On call
//   - manifest *types.DiscoveryManifest
func (_e *ManifestDiscoverer_Expecter) ValidateManifest(manifest interface{}) *ManifestDiscoverer_ValidateManifest_Call {
	return &ManifestDiscoverer_ValidateManifest_Call{Call: _e.mock.On("ValidateManifest", manifest)}
}

func (_c *ManifestDiscoverer_ValidateManifest_Call) Run(run func(manifest *types.DiscoveryManifest)) *ManifestDiscoverer_ValidateManifest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.DiscoveryManifest))
	})
	return _c
}

func (_c *ManifestDiscoverer_ValidateManifest_Call) Return(_a0 error) *ManifestDiscoverer_ValidateManifest_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewManifestDiscoverer interface {
	mock.TestingT
	Cleanup(func())
}

// NewManifestDiscoverer creates a new instance of ManifestDiscoverer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewManifestDiscoverer(t mockConstructorTestingTNewManifestDiscoverer) *ManifestDiscoverer {
	mock := &ManifestDiscoverer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
