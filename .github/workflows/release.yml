name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.x

      - name: Add GOBIN to PATH
        run: echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
        shell: bash

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          # Needed for release notes
          fetch-depth: 0

      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@v1

      - name: Install PGP private key
        shell: bash
        env:
          PGP_PRIVATE_KEY: ${{ secrets.PGP_PRIVATE_KEY }}
        run: echo "$PGP_PRIVATE_KEY" | gpg --batch --import

      - name: Publish Release
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.DEV_TOOLKIT_TOKEN }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          SNAPCRAFT_TOKEN: ${{ secrets.SNAPCRAFT_TOKEN }}
          SPLIT_PROD_KEY: ${{ secrets.SPLIT_PROD_KEY }}
          SPLIT_STAGING_KEY: ${{ secrets.SPLIT_STAGING_KEY }}
        run: make release-publish

      - id: get-version
        uses: battila7/get-version-action@v2.3.0

      - uses: actions/upload-artifact@v2
        with:
          name: windows-binary
          path: dist/newrelic_windows_amd64/newrelic.exe

      - name: Checkout newrelic-forks/homebrew-core
        uses: actions/checkout@v2
        with:
          repository: newrelic-forks/homebrew-core
          path: homebrew-core
          token: ${{ secrets.DEV_TOOLKIT_TOKEN }}

      - name: Create homebrew-core pull request
        shell: bash
        run: ./scripts/brew_formula_pull_request.sh
        env:
          GH_USER_EMAIL: developer-toolkit-team@newrelic.com
          GH_USER_NAME: 'New Relic Developer Toolkit Bot'

      - name: Install aws cli
        run: |
          sudo apt-get install awscli -y

      - name: Write config 1
        uses: DamianReeves/write-file-action@v1.0
        with:
          path: /home/runner/.aws/credentials
          contents:  |
            [virtuoso_user]
            aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
            aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          write-mode: overwrite

      - name: Write config 2
        uses: DamianReeves/write-file-action@v1.0
        with:
          path: /home/runner/.aws/config
          contents:  |
            [profile virtuoso]
            role_arn = ${{ secrets.AWS_ROLE_ARN }}
            region = ${{ secrets.AWS_DEFAULT_REGION }}
            source_profile = virtuoso_user
          write-mode: overwrite

      - name: Upload install script
        id: upload-install-script
        run: |
          aws s3 cp ./scripts/install.sh s3://nr-downloads-main/install/newrelic-cli/scripts/install.sh --profile virtuoso

      - name: Upload install script (Windows)
        id: upload-install-script-windows
        run: |
          aws s3 cp ./scripts/install.ps1 s3://nr-downloads-main/install/newrelic-cli/scripts/install.ps1 --profile virtuoso

      - name: Upload release artifacts
        id: upload-release-artifacts
        run: |
          aws s3 cp --recursive --exclude "*" --include "newrelic-cli_*.txt" --include "newrelic-cli_*.sig" --include "newrelic-cli_*.zip" --include "newrelic-cli_*.gz" --include "newrelic-cli_*.rpm" --include "newrelic-cli_*.deb" --include "newrelic_*" ./dist s3://nr-downloads-main/install/newrelic-cli/${{ steps.get-version.outputs.version }}/ --profile virtuoso

      - name: Cleanup configs
        run: |
          rm -rf /home/runner/.aws/credentials
          rm -rf /home/runner/.aws/config

  release-windows-installer:
    runs-on: windows-latest
    needs: release
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.3

      - uses: actions/download-artifact@v2
        with:
          name: windows-binary
          path: .\dist\newrelic_windows_amd64

      - name: Compile installer
        run: msbuild .\build\package\msi\NewRelicCLIInstaller.sln

      - name: Sign installer
        env:
          PFX_PASSWORD: ${{ secrets.PFX_PASSWORD }}
        working-directory: .\build\package\msi\NewRelicCLIInstaller
        run: .\SignMSI.cmd

      - name: Get latest release upload URL
        id: get-latest-release-upload-url
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "::set-output name=upload_url::$(./scripts/get_latest_release_upload_url.sh)"

      - name: Upload Windows installer
        id: upload-windows-installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get-latest-release-upload-url.outputs.upload_url }}
          asset_path: .\build\package\msi\NewRelicCLIInstaller\bin\x64\Release\NewRelicCLIInstaller.msi
          asset_name: NewRelicCLIInstaller.msi
          asset_content_type: application/octet-stream

  publish:
    runs-on: ubuntu-latest
    needs: release-windows-installer
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - id: get-version
        uses: battila7/get-version-action@v2.3.0

      - name: Install aws cli
        run: |
          sudo apt-get install awscli -y

      - name: Write config 1
        uses: DamianReeves/write-file-action@v1.0
        with:
          path: /home/runner/.aws/credentials
          contents:  |
            [virtuoso_user]
            aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
            aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          write-mode: overwrite

      - name: Write config 2
        uses: DamianReeves/write-file-action@v1.0
        with:
          path: /home/runner/.aws/config
          contents:  |
            [profile virtuoso]
            role_arn = ${{ secrets.AWS_ROLE_ARN }}
            region = ${{ secrets.AWS_DEFAULT_REGION }}
            source_profile = virtuoso_user
          write-mode: overwrite

      - name: Fetch Github Release Asset
        uses: dsaltares/fetch-gh-release-asset@0.06
        with:
          repo: "newrelic/newrelic-cli"
          version: "tags/${{ steps.get-version.outputs.version }}"
          file: "NewRelicCLIInstaller.msi"
          target: "NewRelicCLIInstaller.msi"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows MSI
        id: upload-windows-msi
        run: |
          aws s3 cp NewRelicCLIInstaller.msi s3://nr-downloads-main/install/newrelic-cli/${{ steps.get-version.outputs.version }}/NewRelicCLIInstaller.msi --profile virtuoso

      - name: Create currentVersion.txt
        id: create-current-version
        uses: "finnp/create-file-action@master"
        env:
          FILE_NAME: "currentVersion.txt"
          FILE_DATA: "${{ steps.get-version.outputs.version }}"

      - name: Upload currentVersion.txt
        id: upload-current-version
        run: |
          aws s3 cp currentVersion.txt s3://nr-downloads-main/install/newrelic-cli/currentVersion.txt --profile virtuoso

      - name: Upload chocolatey package
        shell: bash
        run: make chocolatey-publish
        env:
          CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}

      - name: Cleanup configs
        run: |
          rm -rf /home/runner/.aws/credentials
          rm -rf /home/runner/.aws/config
